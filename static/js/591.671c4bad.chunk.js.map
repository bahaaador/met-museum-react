{"version":3,"file":"static/js/591.671c4bad.chunk.js","mappings":"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","sources":["components/ItemCard/ItemCard.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSpring, animated } from \"react-spring\";\nimport { useInView } from \"react-intersection-observer\";\nimport { useMetStore } from \"Store\";\n\nimport \"./ItemCard.css\";\n\nconst ItemCard = ({ id }) => {\n  const [ref, inView] = useInView({\n    rootMargin: \"200px 0px\",\n  });\n\n  const setDetailsModalData = useMetStore((state) => state.setDetailsModalData);\n\n  const [item, setItem] = useState(null);\n  const [imageLoaded, setImageLoaded] = useState(false);\n\n  const handleImageLoaded = () => {\n    setImageLoaded(true);\n  };\n\n  useEffect(() => {\n    const abortController = new AbortController(); // this is used to cancel ongoing fetch requests when user updates the keyword to make sure we only run relavant queries\n\n    const fetchData = async () => {\n      console.info(\"fetching details for object id:\" + id);\n\n      try {\n        var res = await fetch(\n          `https://collectionapi.metmuseum.org/public/collection/v1/objects/${id}`,\n          { cache: \"force-cache\", signal: abortController.signal } // quick and inexpensive way to force browser to cache these subsequent calls since these will most likely be static result\n        );\n\n        var response = await res.json();\n        setItem(response);\n      } catch (err) {\n        if (err.name === \"AbortError\") {\n          console.log(\"Fetch details aborted ðŸ‘€\");\n          console.dir(err);\n        } else {\n          console.error(`Error fetching item id:${id}`, err);\n        }\n      }\n    };\n\n    if (inView) fetchData();\n\n    return function cleanup() {\n      abortController.abort();\n    };\n  }, [id, inView]);\n\n  const fadeInProps = useSpring({ opacity: 1, from: { opacity: 0 } });\n\n  const fadeInPropsImage = useSpring({\n    opacity: imageLoaded ? 1 : 0,\n  });\n\n  const [{ transform, color, opacity }, setAnimatedProps] = useSpring(() => ({\n    transform: \"scale(1)\",\n    color: \"#000\",\n    opacity: \"0.7\",\n    marginTop: 0,\n  }));\n\n  const renderCardContent = () => {\n    if (!inView) {\n      return null;\n    }\n\n    if (item == null) {\n      return <Shimmer />;\n    }\n\n    return (\n      <animated.div\n        key={item.objectID}\n        onClick={() => {\n          setDetailsModalData(item);\n        }}\n      >\n        {item.primaryImageSmall && (\n          <animated.img\n            style={fadeInPropsImage}\n            hidden={true}\n            alt={item.objectName}\n            src={item.primaryImageSmall}\n            onLoad={handleImageLoaded}\n          />\n        )}\n        <animated.span style={{ color, opacity }}>{item.title}</animated.span>\n      </animated.div>\n    );\n  };\n\n  return (\n    <animated.div\n      style={{ ...fadeInProps, transform }}\n      className={\"card\"}\n      ref={ref}\n      onMouseOver={() =>\n        setAnimatedProps({\n          color: \"#fff\",\n          opacity: \"1\",\n          transform: \"scale(1.06)\",\n        })\n      }\n      onMouseLeave={() =>\n        setAnimatedProps({\n          color: \"#000\",\n          opacity: \"0.7\",\n          transform: \"scale(1)\",\n        })\n      }\n    >\n      {renderCardContent()}\n    </animated.div>\n  );\n};\n\nconst Shimmer = () => (\n  <div className=\"shimmer\" aria-label=\"Loading content\">\n    <div className=\"image\" />\n    <div className=\"content\">\n      <span className=\"title\" />\n    </div>\n  </div>\n);\n\nexport default ItemCard;\n"],"names":["Shimmer","_jsxs","className","children","_jsx","_ref","id","_useInView","useInView","rootMargin","_useInView2","_slicedToArray","ref","inView","setDetailsModalData","useMetStore","state","_useState","useState","_useState2","item","setItem","_useState3","_useState4","imageLoaded","setImageLoaded","handleImageLoaded","useEffect","abortController","AbortController","fetchData","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","res","response","wrap","_context","prev","next","console","info","fetch","concat","cache","signal","sent","json","t0","name","log","dir","error","stop","apply","arguments","abort","fadeInProps","useSpring","opacity","from","fadeInPropsImage","_useSpring","transform","color","marginTop","_useSpring2","_useSpring2$","setAnimatedProps","animated","style","_objectSpread","onMouseOver","onMouseLeave","onClick","primaryImageSmall","hidden","alt","objectName","src","onLoad","title","objectID"],"sourceRoot":""}