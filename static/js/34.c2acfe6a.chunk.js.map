{"version":3,"file":"static/js/34.c2acfe6a.chunk.js","mappings":"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","sources":["../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx","components/ItemCard/ItemCard.js","components/ItemsGrid/ItemsGrid.js"],"sourcesContent":["import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useSpring, animated } from \"react-spring\";\nimport { useInView } from \"react-intersection-observer\";\nimport { useMetStore } from \"Store\";\n\nimport \"./ItemCard.css\";\nimport { fetchItemDetails } from \"api/metMusuem\";\n\nconst ItemCard = ({ id }) => {\n  const [ref, inView] = useInView({\n    rootMargin: \"200px 0px\",\n  });\n\n  const setDetailsModalData = useMetStore((state) => state.setDetailsModalData);\n\n  const [item, setItem] = useState(null);\n  const [imageLoaded, setImageLoaded] = useState(false);\n\n  const handleImageLoaded = () => {\n    setImageLoaded(true);\n  };\n\n  useEffect(() => {\n    const abortController = new AbortController(); // this is used to cancel ongoing fetch requests when user updates the keyword to make sure we only run relavant queries\n\n    const fetchData = async () => {\n      console.info(\"fetching details for object id:\" + id);\n\n      try {\n        const data = await fetchItemDetails(id, abortController.signal);\n        setItem(data);\n      } catch (err) {\n        if (err.name === \"AbortError\") {\n          console.log(\"Fetch details aborted 👀\");\n          console.dir(err);\n        } else {\n          console.error(`Error fetching item id:${id}`, err);\n        }\n      }\n    };\n\n    if (inView) fetchData();\n\n    return function cleanup() {\n      abortController.abort();\n    };\n  }, [id, inView]);\n\n  const fadeInProps = useSpring({ opacity: 1, from: { opacity: 0 } });\n\n  const fadeInPropsImage = useSpring({\n    opacity: imageLoaded ? 1 : 0,\n  });\n\n  const [{ transform, color, opacity }, setAnimatedProps] = useSpring(() => ({\n    transform: \"scale(1)\",\n    color: \"#000\",\n    opacity: \"0.7\",\n    marginTop: 0,\n  }));\n\n  const renderCardContent = () => {\n    if (!inView) return null;\n\n    if (item == null) return <Shimmer />;\n\n    return (\n      <animated.div\n        key={item.objectID}\n        onClick={() => {\n          setDetailsModalData(item);\n        }}\n      >\n        {item.primaryImageSmall && (\n          <animated.img\n            style={fadeInPropsImage}\n            hidden={true}\n            alt={item.objectName}\n            src={item.primaryImageSmall}\n            onLoad={handleImageLoaded}\n          />\n        )}\n        <animated.span style={{ color, opacity }}>{item.title}</animated.span>\n      </animated.div>\n    );\n  };\n\n  return (\n    <animated.div\n      style={{ ...fadeInProps, transform }}\n      className={\"card\"}\n      ref={ref}\n      onMouseOver={() =>\n        setAnimatedProps({\n          color: \"#fff\",\n          opacity: \"1\",\n          transform: \"scale(1.06)\",\n        })\n      }\n      onMouseLeave={() =>\n        setAnimatedProps({\n          color: \"#000\",\n          opacity: \"0.7\",\n          transform: \"scale(1)\",\n        })\n      }\n    >\n      {renderCardContent()}\n    </animated.div>\n  );\n};\n\nconst Shimmer = () => (\n  <div className=\"shimmer\" aria-label=\"Loading content\">\n    <div className=\"image\" />\n    <div className=\"content\">\n      <span className=\"title\" />\n    </div>\n  </div>\n);\n\nexport default ItemCard;\n","import React from \"react\";\nimport { useInView } from \"react-intersection-observer\";\nimport \"./ItemsGrid.css\";\n\nimport ItemCard from \"components/ItemCard\";\nconst ItemCardMemoized = React.memo(ItemCard);\n\nconst ItemsGrid = ({ data }) => {\n  const [ref, inView] = useInView({\n    rootMargin: \"200px 0px\",\n  });\n\n  return (\n    <div\n      ref={ref}\n      style={{ minHeight: !inView ? \"30000px\" : null }}\n      className={\"search-result-grid\"}\n    >\n      {inView && data.map((id) => <ItemCardMemoized id={id} key={id} />)}\n    </div>\n  );\n};\n\nexport default ItemsGrid;\n"],"names":["observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","optionsToId","options","Object","keys","sort","filter","key","map","concat","root","has","set","toString","get","observe","element","callback","arguments","length","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","_createObserver","id","instance","thresholds","elements","observer","entries","forEach","entry","_elements$get","inView","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","isPlainChildren","props","children","React","useInView","_state$entry","_ref","delay","rootMargin","triggerOnce","skip","initialInView","onChange","_React$useState","_React$useState2","_slicedToArray","ref","setRef","_React$useState3","_React$useState4","state","setState","current","entryTarget","previousEntryTarget","result","Shimmer","_jsxs","className","_jsx","_useInView","_useInView2","setDetailsModalData","useMetStore","_useState","useState","_useState2","item","setItem","_useState3","_useState4","imageLoaded","setImageLoaded","handleImageLoaded","useEffect","abortController","AbortController","fetchData","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","wrap","_context","prev","next","console","info","fetchItemDetails","signal","sent","t0","name","log","dir","error","stop","apply","abort","fadeInProps","useSpring","opacity","from","fadeInPropsImage","_useSpring","transform","color","marginTop","_useSpring2","_useSpring2$","setAnimatedProps","animated","style","_objectSpread","onMouseOver","onMouseLeave","onClick","primaryImageSmall","hidden","alt","objectName","src","onLoad","title","objectID","ItemCardMemoized","ItemCard","minHeight"],"sourceRoot":""}