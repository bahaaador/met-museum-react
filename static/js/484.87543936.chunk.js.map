{"version":3,"file":"static/js/484.87543936.chunk.js","mappings":"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","sources":["components/ItemsGridComponent/ItemsGridComponent.js","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["import React, { useState, lazy } from \"react\";\nimport { useInView } from \"react-intersection-observer\";\nimport \"./ItemsGridComponent.css\";\n\nconst DetailsModal = lazy(() =>\n  import(\"components/DetailsModalComponent/DetailsModalComponent\")\n);\nconst ItemCardComponent = lazy(() =>\n  import(\"components/ItemCardComponent/ItemCardComponent\")\n);\nconst ItemCardComponentMemoized = React.memo(ItemCardComponent);\n\nconst ItemsGridComponent = ({ data, ...rest }) => {\n  const [ref, inView] = useInView({\n    rootMargin: \"200px 0px\",\n  });\n\n  const [detailOverlayData, setDetailOverlay] = useState(null);\n  return (\n    <div\n      ref={ref}\n      style={{ minHeight: !inView ? \"30000px\" : null }}\n      className={\"Search-Result-Grid\"}\n    >\n      {inView &&\n        data.map((id) => (\n          <ItemCardComponentMemoized\n            className={\"object-container\"}\n            {...rest}\n            setDetailOverlay={setDetailOverlay}\n            id={id}\n            key={id}\n          />\n        ))}\n      {detailOverlayData && (\n        <DetailsModal\n          item={detailOverlayData}\n          closeModal={() => setDetailOverlay(null)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ItemsGridComponent;\n","import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["DetailsModal","lazy","ItemCardComponent","ItemCardComponentMemoized","React","_ref","data","rest","_objectWithoutProperties","_excluded","_useInView","useInView","rootMargin","_useInView2","_slicedToArray","ref","inView","_useState","useState","_useState2","detailOverlayData","setDetailOverlay","_jsxs","style","minHeight","className","children","map","id","_createElement","_objectSpread","key","_jsx","item","closeModal","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","optionsToId","options","Object","keys","sort","filter","concat","root","has","set","toString","get","observe","element","callback","arguments","length","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","_createObserver","instance","thresholds","elements","observer","entries","forEach","entry","_elements$get","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","isPlainChildren","props","_state$entry","delay","triggerOnce","skip","initialInView","onChange","_React$useState","_React$useState2","setRef","_React$useState3","_React$useState4","state","setState","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}